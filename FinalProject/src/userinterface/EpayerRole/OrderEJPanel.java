/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.EpayerRole;

import Business.Customer.Customer;
import Business.CustomerOrder.BuyOrderItem;
import Business.EcoSystem;
import Business.Epay.Epayer;
import Business.Network.Network;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 13522
 */
public class OrderEJPanel extends javax.swing.JPanel {

    /**
     * Creates new form OrderEJPanel
     */
     private JPanel userProcessContainer;
    private EcoSystem system;
    private UserAccount useraccount;
   
    private Network net;
    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public OrderEJPanel(JPanel userProcessContainer,EcoSystem system,Network net, UserAccount useraccount) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.useraccount = useraccount;
     
        this.net= net;
        
        //valueLabel.setText(enterprise.getName());
     populateTable();
     populateTable1();
       
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ApproveTable = new javax.swing.JTable();
        bRefund = new javax.swing.JButton();
        bApprove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        RefundTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ApproveTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Customer", "Seller", "totalPrice", "Comment", "Time", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ApproveTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 808, 147));

        bRefund.setText("Refund");
        bRefund.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRefundActionPerformed(evt);
            }
        });
        add(bRefund, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 540, -1, -1));

        bApprove.setText("Approve");
        bApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bApproveActionPerformed(evt);
            }
        });
        add(bApprove, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 250, -1, -1));

        RefundTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Customer", "Seller", "totalPrice", "Comment", "Time", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(RefundTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 350, 808, 147));

        jLabel5.setText("Approve Table:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, -1, 20));

        jLabel6.setText("Refund Table:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, -1, 30));

        btnBack.setText("Back<<");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 30));

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/EBack.jpg"))); // NOI18N
        add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 980, 630));
    }// </editor-fold>//GEN-END:initComponents

    private void bRefundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRefundActionPerformed

      int selectedRow = RefundTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
      BuyOrderItem buyitem = (BuyOrderItem)RefundTable.getValueAt(selectedRow, 0);
      if(buyitem.getEvaluate().getRefund()==true&&buyitem.getStatus()=="Canceled"){
      buyitem.setStatus("TRANSACTION END");
      int moneyLeft= buyitem.getCustomer().getUserAccount().getEpaccount().getMoney();
      buyitem.getCustomer().getUserAccount().getEpaccount().setMoney(moneyLeft+(buyitem.getQuantity()*buyitem.getItem().getPrice()));
      }else if(buyitem.getStatus()=="TRANSACTION END"){
      JOptionPane.showMessageDialog(null, "Transaction was ended", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
      }else{
      JOptionPane.showMessageDialog(null, "Customer did not want to refund the item yet!", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
      }
      populateTable1();
    }//GEN-LAST:event_bRefundActionPerformed

    private void bApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bApproveActionPerformed
        // TODO add your handling code here:
         int selectedRow = ApproveTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
      BuyOrderItem buyitem = (BuyOrderItem)ApproveTable.getValueAt(selectedRow, 0);
      if(buyitem.getStatus()=="RECEIVED"&&buyitem.getEvaluate().getRefund()==false){
      buyitem.setStatus("TRANSACTION END");
      int moneyLeft= buyitem.getItem().getSeller().getUserAccount().getEpaccount().getMoney();
      buyitem.getItem().getSeller().getUserAccount().getEpaccount().setMoney( moneyLeft+(buyitem.getQuantity()*buyitem.getItem().getPrice()));
      }else if(buyitem.getStatus()=="TRANSACTION END"){
      JOptionPane.showMessageDialog(null, "Transaction was ended", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
      }
      else{
      JOptionPane.showMessageDialog(null, "Customer has not recieved the item yet!", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
      }
      populateTable();
    }//GEN-LAST:event_bApproveActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ApproveTable;
    private javax.swing.JTable RefundTable;
    private javax.swing.JButton bApprove;
    private javax.swing.JButton bRefund;
    private javax.swing.JButton btnBack;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
 public void populateTable(){
        int rowCount = ApproveTable.getRowCount();
        DefaultTableModel model = (DefaultTableModel)ApproveTable.getModel();
        for(int i=rowCount-1;i>=0;i--) {
            model.removeRow(i);
        }
        //find buyer who possess this account
        for(Customer customer: net.getCustomerDirectory().getCustomersList()){
             for(BuyOrderItem item: customer.getBuyOrder().getOrderItemList()){
             if(item.getEvaluate().getRefund()==false){
                     Object row[] = new Object[7];
            row[0] = item;
            row[1] = customer.getName();
            row[2] = item.getItem().getSeller();
            row[3] = (item.getQuantity()*item.getItem().getPrice());
            row[4] = item.getEvaluate().getWord();
            row[5] = item.getCreateTime();
            row[6] = item.getStatus();

            model.addRow(row);
                 }
        } 
        }
        
        
    }
 public void populateTable1(){
        int rowCount = RefundTable.getRowCount();
        DefaultTableModel model = (DefaultTableModel)RefundTable.getModel();
        for(int i=rowCount-1;i>=0;i--) {
            model.removeRow(i);
        }
        //find buyer who possess this account
        for(Customer customer: net.getCustomerDirectory().getCustomersList()){
             for(BuyOrderItem item: customer.getBuyOrder().getOrderItemList()){
                 if(item.getEvaluate().getRefund()==true){
                     Object row[] = new Object[7];
            row[0] = item;
            row[1] = customer.getName();
            row[2] = item.getItem().getSeller();
            row[3] = (item.getQuantity()*item.getItem().getPrice());
            row[4] = item.getEvaluate().getWord();
            row[5] = item.getCreateTime();
            row[6] = item.getStatus();

            model.addRow(row);
                 }
            
        } 
        }
        
        
    }
    
}
