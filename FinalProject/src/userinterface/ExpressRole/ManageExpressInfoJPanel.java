/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.ExpressRole;

import Business.CustomerOrder.BuyOrderItem;
import Business.EcoSystem;
import Business.Express.DeliveryMan;
import Business.Express.ExpressManager;
import Business.Express.Transport;
import Business.Network.Network;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 13522
 */
public class ManageExpressInfoJPanel extends javax.swing.JPanel {
    JPanel userProcessContainer;
    Network net;
    EcoSystem system;
    UserAccount useraccount;
    ExpressManager expressmanager;
    /**
     * Creates new form ExpressInfo
     */


    ManageExpressInfoJPanel(JPanel userProcessContainer, Network net, EcoSystem system, UserAccount useraccount, ExpressManager expressmanager) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.useraccount = useraccount;
        this.system = system;
        this.net = net;
        this.expressmanager = expressmanager;
        populateTable();
        populateTable2();
//To change body of generated methods, choose Tools | Templates.
    }
    public void populateTable(){
        int rowCount = tblDriverOrder.getRowCount();
        DefaultTableModel model = (DefaultTableModel)tblDriverOrder.getModel();
        for(int i= rowCount - 1;i >= 0;i--) {
            model.removeRow(i);
        }
        for(BuyOrderItem buyOrderItem : expressmanager.getBuyOrder().getOrderItemList()){
            if(!buyOrderItem.getItem().getSeller().getAddress().equals(buyOrderItem.getCustomer().getAddress()) 
                    && !buyOrderItem.getStatus().equals("Delivered") ){
                Object row[] = new Object[5];
                row[0] = buyOrderItem;
                row[1] = buyOrderItem.getQuantity();
                row[2] = buyOrderItem.getCustomer().getAddress();
                row[3] = buyOrderItem.getItem().getSeller().getAddress();
                row[4] = buyOrderItem.getStatus(); 
                
                model.addRow(row);
                }
        }
    }
    public void populateTable2(){
        int rowCount = tblDeliveryManOrder.getRowCount();
        DefaultTableModel model = (DefaultTableModel)tblDeliveryManOrder.getModel();
        for(int i= rowCount - 1;i >= 0;i--) {
            model.removeRow(i);
        }
        for(BuyOrderItem buyOrderItem : expressmanager.getBuyOrder().getOrderItemList()){
            if(buyOrderItem.getOrderPosition().equals(buyOrderItem.getCustomer().getAddress()) 
                    && !buyOrderItem.getStatus().equals("Delivered")){
                Object row[] = new Object[5];
                row[0] = buyOrderItem;
                row[1] = buyOrderItem.getQuantity();
                row[2] = buyOrderItem.getCustomer().getAddress();
                row[3] = buyOrderItem.getOrderPosition();
                row[4] = buyOrderItem.getStatus(); 
                
                model.addRow(row);
                }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDriver = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDriverOrder = new javax.swing.JTable();
        cbxDriver = new javax.swing.JComboBox<>();
        btnChooseDriver = new javax.swing.JButton();
        btnAssigntoDriver = new javax.swing.JButton();
        lblDeliveryMan = new javax.swing.JLabel();
        cbxDeliveryMan = new javax.swing.JComboBox<>();
        btnChooseDeliveryMan = new javax.swing.JButton();
        btnAssigntoDeliveryMan = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDeliveryManOrder = new javax.swing.JTable();

        lblDriver.setText("Driver:");

        tblDriverOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Items", "Quantity", "Customer Address", "Seller Address", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDriverOrder);

        btnChooseDriver.setText("Choose Driver");
        btnChooseDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseDriverActionPerformed(evt);
            }
        });

        btnAssigntoDriver.setText("Assign to Driver");
        btnAssigntoDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssigntoDriverActionPerformed(evt);
            }
        });

        lblDeliveryMan.setText("Delivery Man:");

        btnChooseDeliveryMan.setText("Choose Delivery Man");
        btnChooseDeliveryMan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseDeliveryManActionPerformed(evt);
            }
        });

        btnAssigntoDeliveryMan.setText("Assign to Delivery Man");
        btnAssigntoDeliveryMan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssigntoDeliveryManActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel1.setText("Express Information");

        jButton1.setText("Back<<");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tblDeliveryManOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Items", "Quantity", "Customer Address", "Seller Address", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblDeliveryManOrder);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(100, 100, 100)
                        .addComponent(jLabel1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnChooseDeliveryMan)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDeliveryMan)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxDeliveryMan, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)))
                        .addGap(18, 18, 18)
                        .addComponent(btnAssigntoDeliveryMan, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(lblDriver)
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnChooseDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbxDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(btnAssigntoDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(412, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDriver)
                            .addComponent(cbxDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAssigntoDriver))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnChooseDriver)
                .addGap(69, 69, 69)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDeliveryMan)
                    .addComponent(cbxDeliveryMan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAssigntoDeliveryMan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnChooseDeliveryMan)
                .addContainerGap(69, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnChooseDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseDriverActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblDriverOrder.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }

        BuyOrderItem buyOrderItem = (BuyOrderItem)tblDriverOrder.getValueAt(selectedRow, 0);

        if(!buyOrderItem.getItem().getSeller().getAddress().equals(buyOrderItem.getCustomer().getAddress())
            //&& (buyOrderItem.getStatus().equals("SELLER SHIPPED")
               ||buyOrderItem.getStatus().equals("Driver Refused")){

            cbxDriver.setEnabled(true);
            btnChooseDriver.setEnabled(false);
            btnAssigntoDriver.setEnabled(true);
            cbxDriver.removeAllItems();

            for(Transport tr : expressmanager.getTransportDir().getDriverList()){
                if(tr.getStatus().equals("Work")) //&& tr.getAddress().equals(buyOrderItem.getItem().getSeller().getAddress()))
                cbxDriver.addItem(tr.getUserAccount().getUsername());
            }
        }
        /*
        else{
            JOptionPane.showMessageDialog(null, "No need to assign a driver", "Warning", JOptionPane.WARNING_MESSAGE);
        }
*/
    }//GEN-LAST:event_btnChooseDriverActionPerformed

    private void btnAssigntoDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssigntoDriverActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblDriverOrder.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }

        BuyOrderItem buyOrderItem = (BuyOrderItem)tblDriverOrder.getValueAt(selectedRow, 0);
        String driverName = (String)cbxDriver.getSelectedItem();
        Transport transport = new Transport();
        for(Transport tr : expressmanager.getTransportDir().getDriverList()){
            if(tr.getUserAccount().getUsername().equals(driverName)){
                transport = tr;
            }
        }
        buyOrderItem.setStatus("Assign to Driver");
        transport.getBuyOrder().getOrderItemList().add(buyOrderItem);

        cbxDriver.setEnabled(false);
        btnChooseDriver.setEnabled(true);
        btnAssigntoDriver.setEnabled(false);
        JOptionPane.showMessageDialog(null, "Driver Assigned!");
        populateTable();
    }//GEN-LAST:event_btnAssigntoDriverActionPerformed

    private void btnChooseDeliveryManActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseDeliveryManActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblDeliveryManOrder.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }

        BuyOrderItem buyOrderItem = (BuyOrderItem)tblDeliveryManOrder.getValueAt(selectedRow, 0);

        if(buyOrderItem.getOrderPosition().equals(buyOrderItem.getCustomer().getAddress())
            //&& (buyOrderItem.getStatus().equals("SELLER SHIPPED")
               ||buyOrderItem.getStatus().equals("Delivery Man Refused")){

            cbxDeliveryMan.setEnabled(true);
            btnChooseDeliveryMan.setEnabled(false);
            btnAssigntoDeliveryMan.setEnabled(true);
            cbxDeliveryMan.removeAllItems();

            for(DeliveryMan dm : expressmanager.getDeliverymanDir().getDeliverymanList()){
                if(dm.getStatus().equals("Work")) //&& tr.getAddress().equals(buyOrderItem.getItem().getSeller().getAddress()))
                cbxDeliveryMan.addItem(dm.getUserAccount().getUsername());
            }
        }
        /*
        int selectedRow = tblDeliveryManOrder.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }

        BuyOrderItem buyOrderItem = (BuyOrderItem)tblDeliveryManOrder.getValueAt(selectedRow, 0);
        if//(!buyOrderItem.getOrderPosition().equals(buyOrderItem.getCustomer().getAddress())
            //&& buyOrderItem.getStatus().equals("SELLER SHIPPED"))
                       //||buyOrderItem.getStatus().equals("Arrive at Express transfer station")
       // ||
                (buyOrderItem.getStatus().equals("Deliveryman Refused!"))
        {

            cbxDeliveryMan.setEnabled(true);
            btnChooseDeliveryMan.setEnabled(false);
            btnAssigntoDeliveryMan.setEnabled(true);
            cbxDeliveryMan.removeAllItems();

            for(DeliveryMan dm : expressmanager.getDeliverymanDir().getDeliverymanList()){
                if(dm.getStatus().equals("Work")) // && dm.getAddress().equals(buyOrderItem.getCustomer().getAddress()))
                cbxDeliveryMan.addItem(dm.getUserAccount().getUsername());
            }
        }
        /*
        else 
            if(buyOrderItem.getOrderPosition().equals(buyOrderItem.getCustomer().getAddress())) //&& buyOrderItem.getStatus()=="SELLER SHIPPED")
        {

            //cbxDeliveryMan.setEnabled(true);
            //btnChooseDeliveryMan.setEnabled(false);
            //btnAssigntoDeliveryMan.setEnabled(true);

            for(DeliveryMan dm : expressmanager.getDeliverymanDir().getDeliverymanList()){
                if(dm.getStatus().equals("Work")) //&& dm.getAddress().equals(buyOrderItem.getCustomer().getAddress()))
                cbxDeliveryMan.addItem(dm.getUserAccount().getUsername());
            }
        }/*
        else{
            JOptionPane.showMessageDialog(null, "No need to assign a driver", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
*/
    }//GEN-LAST:event_btnChooseDeliveryManActionPerformed

    private void btnAssigntoDeliveryManActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssigntoDeliveryManActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tblDeliveryManOrder.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        BuyOrderItem buyOrderItem = (BuyOrderItem)tblDeliveryManOrder.getValueAt(selectedRow, 0);
        String deliverymanname = (String)cbxDeliveryMan.getSelectedItem();
        DeliveryMan deliveryman = new DeliveryMan();
        for(DeliveryMan d : expressmanager.getDeliverymanDir().getDeliverymanList()){
            if(d.getUserAccount().getUsername().equals(deliverymanname)){
                deliveryman = d;
            }
        }
        buyOrderItem.setStatus("Assign to Delivery Man");
        deliveryman.getBuyOrder().getOrderItemList().add(buyOrderItem);

        cbxDeliveryMan.setEnabled(false);
        btnChooseDeliveryMan.setEnabled(true);
        btnAssigntoDeliveryMan.setEnabled(false);
        JOptionPane.showMessageDialog(null, "Delivery Man Assigned!");
        populateTable2();
    }//GEN-LAST:event_btnAssigntoDeliveryManActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssigntoDeliveryMan;
    private javax.swing.JButton btnAssigntoDriver;
    private javax.swing.JButton btnChooseDeliveryMan;
    private javax.swing.JButton btnChooseDriver;
    private javax.swing.JComboBox<String> cbxDeliveryMan;
    private javax.swing.JComboBox<String> cbxDriver;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDeliveryMan;
    private javax.swing.JLabel lblDriver;
    private javax.swing.JTable tblDeliveryManOrder;
    private javax.swing.JTable tblDriverOrder;
    // End of variables declaration//GEN-END:variables
}
