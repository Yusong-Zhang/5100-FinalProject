/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.ExpressRole;

import Business.CustomerOrder.BuyOrderItem;
import Business.EcoSystem;
import Business.Express.DeliveryMan;
import Business.Express.ExpressManager;
import Business.Express.Transport;
import Business.Network.Network;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 13522
 */
public class ManageExpressInfoJPanel extends javax.swing.JPanel {
    JPanel userProcessContainer;
    Network net;
    EcoSystem system;
    UserAccount useraccount;
    ExpressManager expressmanager;
    /**
     * Creates new form ExpressInfo
     */


    ManageExpressInfoJPanel(JPanel userProcessContainer, Network net, EcoSystem system, UserAccount useraccount, ExpressManager expressmanager) {
          initComponents();
        this.userProcessContainer = userProcessContainer;
        this.useraccount = useraccount;
        this.system = system;
        this.net = net;
        this.expressmanager = expressmanager;
        populateTable();
//To change body of generated methods, choose Tools | Templates.
    }
    public void populateTable(){
        int rowCount = tblOrder.getRowCount();
        DefaultTableModel model = (DefaultTableModel)tblOrder.getModel();
        for(int i= rowCount - 1;i >= 0;i--) {
            model.removeRow(i);
        }
        for(BuyOrderItem buyOrderItem:expressmanager.getBuyOrder().getOrderItemList()){
            
                Object row[] = new Object[4];
                row[0] =buyOrderItem;
                row[1] =buyOrderItem.getQuantity();
                row[2] =buyOrderItem.getCustomer().getAddress();
                row[3]= buyOrderItem.getItem().getSeller().getPosition();
                row[4]= buyOrderItem.getStatus(); 
                
                model.addRow(row);
                }
            }
    public void searchTable(ArrayList<BuyOrderItem> orderItemList) {
        int rowCount = tblOrder.getRowCount();
        DefaultTableModel model = (DefaultTableModel)tblOrder.getModel();
        for(int i=rowCount-1;i>=0;i--) {
            model.removeRow(i);
        }
        for(BuyOrderItem buyOrderItem: orderItemList){
                Object row[] = new Object[4];
                row[0] =buyOrderItem;
                row[1] =buyOrderItem.getQuantity();
                row[2] =buyOrderItem.getCustomer().getAddress();
                row[3]= buyOrderItem.getItem().getSeller().getPosition();
                row[4]= buyOrderItem.getStatus(); 
                
                model.addRow(row);
                }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDriver = new javax.swing.JLabel();
        lblGoods = new javax.swing.JLabel();
        txtGoods = new javax.swing.JTextField();
        lblBuyerPosition = new javax.swing.JLabel();
        txtBuyerPosition = new javax.swing.JTextField();
        lblSellerPosition = new javax.swing.JLabel();
        txtSellerPosition = new javax.swing.JTextField();
        btnRefresh = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        txtStatus = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrder = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        cbxDriver = new javax.swing.JComboBox<>();
        btnChooseDriver = new javax.swing.JButton();
        btnAssigntoDriver = new javax.swing.JButton();
        lblDeliveryMan = new javax.swing.JLabel();
        cbxDeliveryMan = new javax.swing.JComboBox<>();
        btnChooseDeliveryMan = new javax.swing.JButton();
        btnAssigntoDeliveryMan = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        lblDriver.setText("Driver:");

        lblGoods.setText("Goods:");

        lblBuyerPosition.setText("Buyer Position:");

        lblSellerPosition.setText("Seller Position:");

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        lblStatus.setText("Status:");

        tblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Goods", "Quantity", "Buyer Position", "Seller Position", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblOrder);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnChooseDriver.setText("Choose Driver");
        btnChooseDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseDriverActionPerformed(evt);
            }
        });

        btnAssigntoDriver.setText("Assign to Driver");
        btnAssigntoDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssigntoDriverActionPerformed(evt);
            }
        });

        lblDeliveryMan.setText("Driver:");

        btnChooseDeliveryMan.setText("Choose Delivery Man");
        btnChooseDeliveryMan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseDeliveryManActionPerformed(evt);
            }
        });

        btnAssigntoDeliveryMan.setText("Assign to Delivery Man");
        btnAssigntoDeliveryMan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssigntoDeliveryManActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel1.setText("Express Information");

        jButton1.setText("Back<<");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(100, 100, 100)
                                        .addComponent(jLabel1))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnRefresh)
                                        .addGap(109, 109, 109))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblGoods)
                                .addGap(69, 69, 69)
                                .addComponent(txtGoods, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblBuyerPosition)
                                    .addComponent(lblSellerPosition)
                                    .addComponent(lblStatus))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSellerPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBuyerPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(lblDriver)
                                .addGap(18, 18, 18)
                                .addComponent(cbxDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(lblDeliveryMan)
                                .addGap(18, 18, 18)
                                .addComponent(cbxDeliveryMan, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnChooseDeliveryMan)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnAssigntoDeliveryMan))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnChooseDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnAssigntoDriver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(btnSearch)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jButton1))
                        .addGap(42, 42, 42))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnRefresh)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGoods)
                    .addComponent(txtGoods, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDriver)
                    .addComponent(cbxDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBuyerPosition)
                    .addComponent(txtBuyerPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChooseDriver)
                    .addComponent(btnAssigntoDriver))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSellerPosition)
                    .addComponent(txtSellerPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDeliveryMan)
                    .addComponent(cbxDeliveryMan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChooseDeliveryMan)
                    .addComponent(btnAssigntoDeliveryMan))
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String goods = txtGoods.getText();

        //star to filter no-empty requirement
        ArrayList<BuyOrderItem> orderItemList = new ArrayList<BuyOrderItem>();
        if(goods.length()>0){
            for(BuyOrderItem buyOrderItem:expressmanager.getBuyOrder().getOrderItemList()){
                if(buyOrderItem.getItem().getItemName().equals(goods)){
                    orderItemList.add(buyOrderItem);
                }
            }
        }else{
            orderItemList = expressmanager.getBuyOrder().getOrderItemList();
        }

        String buyerposition = txtBuyerPosition.getText();
        ArrayList<BuyOrderItem> orderItemList2 = new ArrayList<BuyOrderItem>();
        if(buyerposition.length()>0){
            for(BuyOrderItem item: orderItemList){
                if(item.getCustomer().getAddress().equals(buyerposition)){
                    orderItemList2.add(item);
                }
            }
        }else{
            orderItemList2 = orderItemList;
        }

        String sellerposition = txtSellerPosition.getText();
        ArrayList<BuyOrderItem> orderItemList3 = new ArrayList<BuyOrderItem>();
        if(sellerposition.length()>0){
            for(BuyOrderItem item: orderItemList){
                if(item.getItem().getSeller().getPosition().equals(sellerposition)){
                    orderItemList3.add(item);
                }
            }
        }else{
            orderItemList3 = orderItemList2;
        }

        String status = txtStatus.getText();
        ArrayList<BuyOrderItem> orderItemList4 = new ArrayList<BuyOrderItem>();
        if(status.length()>0){
            for(BuyOrderItem item: orderItemList3){
                if(item.getStatus().equals(status)){
                    orderItemList4.add(item);
                }
            }
        }else{
            orderItemList4 = orderItemList3;
        }
        searchTable(orderItemList4);

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnChooseDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseDriverActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblOrder.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }

        BuyOrderItem buyOrderItem = (BuyOrderItem)tblOrder.getValueAt(selectedRow, 0);

        if(!buyOrderItem.getItem().getSeller().getPosition().equals(buyOrderItem.getCustomer().getAddress())
            && (buyOrderItem.getStatus().equals("SELLER SHIPPED")||buyOrderItem.getStatus().equals("Driver Refused"))){

            cbxDriver.setEnabled(true);
            btnChooseDriver.setEnabled(false);
            btnAssigntoDriver.setEnabled(true);
            cbxDriver.removeAllItems();

            for(Transport tr :expressmanager.getTransportDir().getDriverList()){
                if(tr.getStatus().equals("Work") && tr.getAddress().equals(buyOrderItem.getItem().getSeller().getPosition()))
                cbxDriver.addItem(tr.getUserAccount().getUsername());
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "No need to assign a driver", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnChooseDriverActionPerformed

    private void btnAssigntoDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssigntoDriverActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblOrder.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }

        BuyOrderItem buyOrderItem = (BuyOrderItem)tblOrder.getValueAt(selectedRow, 0);
        String driverName = (String)cbxDriver.getSelectedItem();
        Transport transport = new Transport();
        for(Transport tr :expressmanager.getTransportDir().getDriverList()){
            if(tr.getUserAccount().getUsername().equals(driverName)){
                transport = tr;
            }
        }
        buyOrderItem.setStatus("Assign to Driver");
        transport.getBuyOrder().getOrderItemList().add(buyOrderItem);

        cbxDriver.setEnabled(false);
        btnChooseDriver.setEnabled(true);
        btnAssigntoDriver.setEnabled(false);
        JOptionPane.showMessageDialog(null, "Driver Assigned!");
        populateTable();
    }//GEN-LAST:event_btnAssigntoDriverActionPerformed

    private void btnChooseDeliveryManActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseDeliveryManActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblOrder.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }

        BuyOrderItem buyOrderItem = (BuyOrderItem)tblOrder.getValueAt(selectedRow, 0);
        if((buyOrderItem.getItem().getSeller().getPosition().equals(buyOrderItem.getCustomer().getAddress())
            && buyOrderItem.getStatus().equals("SELLER SHIPPED"))
        //               ||buyOrderItem.getStatus().equals("Arrive at Express transfer station")
        ||buyOrderItem.getStatus().equals("Deliveryman Refused"))
        {

            cbxDeliveryMan.setEnabled(true);
            btnChooseDeliveryMan.setEnabled(false);
            btnAssigntoDeliveryMan.setEnabled(true);
            cbxDeliveryMan.removeAllItems();

            for(DeliveryMan dm :expressmanager.getDeliverymanDir().getDeliverymanList()){
                if(dm.getStatus().equals("Work") && dm.getAddress().equals(buyOrderItem.getCustomer().getAddress()))
                cbxDeliveryMan.addItem(dm.getUserAccount().getUsername());
            }
        }

        else if(buyOrderItem.getItem().getSeller().getPosition()==buyOrderItem.getCustomer().getAddress()&&buyOrderItem.getStatus()=="SELLER SHIPPED")
        {

            cbxDeliveryMan.setEnabled(true);
            btnChooseDeliveryMan.setEnabled(false);
            btnAssigntoDeliveryMan.setEnabled(true);

            for(DeliveryMan dm :expressmanager.getDeliverymanDir().getDeliverymanList()){
                if(dm.getStatus().equals("Work") && dm.getAddress().equals(buyOrderItem.getCustomer().getAddress()))
                cbxDeliveryMan.addItem(dm.getUserAccount().getUsername());
            }
        }else{
            JOptionPane.showMessageDialog(null, "No need to assign a driver", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_btnChooseDeliveryManActionPerformed

    private void btnAssigntoDeliveryManActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssigntoDeliveryManActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblOrder.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }

        BuyOrderItem buyOrderItem = (BuyOrderItem)tblOrder.getValueAt(selectedRow, 0);
        String name = (String)cbxDeliveryMan.getSelectedItem();
        DeliveryMan deliveryman=new DeliveryMan();
        for(DeliveryMan d:expressmanager.getDeliverymanDir().getDeliverymanList()){
            if(d.getUserAccount().getUsername().equals(name)){
                deliveryman=d;
            }
        }
        buyOrderItem.setStatus("Assigned to Delivery Man");
        deliveryman.getBuyOrder().getOrderItemList().add(buyOrderItem);

        cbxDeliveryMan.setEnabled(false);
        btnChooseDeliveryMan.setEnabled(true);
        btnAssigntoDeliveryMan.setEnabled(false);
        JOptionPane.showMessageDialog(null, "Delivery Man Assigned!");
        populateTable();
    }//GEN-LAST:event_btnAssigntoDeliveryManActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssigntoDeliveryMan;
    private javax.swing.JButton btnAssigntoDriver;
    private javax.swing.JButton btnChooseDeliveryMan;
    private javax.swing.JButton btnChooseDriver;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbxDeliveryMan;
    private javax.swing.JComboBox<String> cbxDriver;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBuyerPosition;
    private javax.swing.JLabel lblDeliveryMan;
    private javax.swing.JLabel lblDriver;
    private javax.swing.JLabel lblGoods;
    private javax.swing.JLabel lblSellerPosition;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTable tblOrder;
    private javax.swing.JTextField txtBuyerPosition;
    private javax.swing.JTextField txtGoods;
    private javax.swing.JTextField txtSellerPosition;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables
}
